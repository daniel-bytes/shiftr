/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"
#include "SliderBoxControl.h"
#include "OscillatorChannel.h"

//==============================================================================
SquarAudioProcessorEditor::SquarAudioProcessorEditor (SquarAudioProcessor* ownerFilter)
    : AudioProcessorEditor (ownerFilter)
{
	Parameters *parameters = ownerFilter->getParameters();

	int numChannels = getProcessor()->getNumTracks();
	int numSteps = getProcessor()->getNumStepsPerTrack();

	appendComponent(new OscillatorChannel(1, 48), "Oscillator Channel 1", true, 5, 5, 700, 600);

	configureParameters(parameters);

    // This is where our plugin's editor size is set.
    setSize (800, 600);
}

SquarAudioProcessorEditor::~SquarAudioProcessorEditor()
{
}

//==============================================================================
void SquarAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::white);
/*
    g.setColour (Colours::black);
    g.setFont (15.0f);
    g.drawFittedText ("Hello World!",
                      0, 0, getWidth(), getHeight(),
                      Justification::centred, 1);
*/
}

void SquarAudioProcessorEditor::configureParameters(Parameters *parameters)
{
	for (int i = 0; i < parameters->size(); i++) {
		auto parameter = parameters->get(i);

		for (InterfaceComponent *interfaceComponent : controls) {
			interfaceComponent->configureParameter(parameter);
		}
	}
}

void SquarAudioProcessorEditor::appendComponent(InterfaceComponent *component, String id, bool visible, int x, int y, int width, int height)
{
	component->setComponentID(id);

	if (visible) {
		addAndMakeVisible(component);
	}
	else {
		addChildComponent(component);
	}

	component->setBounds(x, y, width, height);
	controls.add(component);
}